EXP NO : 4 
 
 
CHECKING WHETHER A STRING BELONGS TO A GRAMMAR 
 
Ex 4 a 
AIM : 
 
To write a C program to check whether a string belongs to the grammar 
S → 0 A 1 
A → 0 A | 1 A | ε 
 
Language defined by the Grammar: 
Set of all strings over 𝚺={0,1} that start with 0 and end with 1 
 
ALGORTIHM : 
1. Get the input string from the user.  
2. Find the length of the string. 
3. Check whether all the symbols in the input are either 0 or 1.  If so, 
print “String is valid” and go to step 4.  Otherwise print “String not 
valid” and quit the program. 
4. If the first symbol is 0 and the last symbol is 1, print “String 
accepted”.  Otherwise, print “String not accepted” 
 
 
 
 
 
 
 
 
 
 
 
PROGRAM : 
 
#include<stdio.h> 
#include<string.h> 
int main(){ 
char s[100]; 
int i,flag; 
int l; 
printf("enter a string to check:"); 
scanf("%s",s); 
l=strlen(s); 
flag=1; 
for(i=0;i<l;i++) 
{ 
 if(s[i]!='0' && s[i]!='1') 
 { 
     flag=0; 
 } 
} 
if(flag!=1) 
  printf("string is Not Valid\n"); 
if(flag==1) 
{ 
 if (s[0]=='0'&&s[l-1]=='1') 
  printf("string is accepted\n"); 
 else 
  printf("string is Not accepted\n"); 
 } 
} 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
OUTPUT : 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
EXP 4 b 
CHECKING WHETHER A STRING BELONGS TO A GRAMMAR 
 
 
AIM : 
  
To write a C program to check whether a string belongs to the grammar 
S -> 0 S 0 | 1 S 1 | 0 | 1 | ε 
 
Language defined by the Grammar 
 
Set of all strings over 𝚺={0,1} that are palindrome 
 
ALGORITHM : 
 
1. Get the input string from the user.  
2. Find the length of the string.  Let it be n. 
3. Check whether all the symbols in the input are either 0 or 1.  If so, 
print “String is valid” and go to step 4.  Otherwise print “String not 
valid” and quit the program. 
4. If the 1st symbol and nth symbol are the same, 2nd symbol and (n-1)th 
symbol are the same and so on, then the given string is palindrome.  
So, print “String accepted”.  Otherwise, print “String not accepted” 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
PROGRAM : 
 
#include<stdio.h> 
#include<string.h> 
void main() 
{ 
char s[100]; 
int i,flag,flag1,a,b; 
int l; 
printf("enter a string to check:"); 
scanf("%s",s); 
l=strlen(s); 
flag=1; 
for(i=0;i<l;i++) 
{ 
if(s[i]!='0' && s[i]!='1') 
{ 
 flag=0; 
} 
} 
if(flag!=1) 
printf("string is Not Valid\n"); 
if(flag==1) 
{ 
  flag1=1; 
  a=0;b=l-1; 
  while(a!=(l/2)) 
  { 
   if(s[a]!=s[b]) 
   { 
    flag1=0; 
   } 
   a=a+1; 
   b=b-1; 
  } 
  if (flag1==1) 
{ 
        printf("The string is a palindrome\n"); 
        printf("string is accepted\n"); 
 }   
  else 
 { 
        printf("The string is not a palindrome\n"); 
        printf("string is Not accepted\n"); 
  } 
} 
} 
 
 
OUTPUT : 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
EXP 4 c 
CHECKING WHETHER A STRING BELONGS TO A GRAMMAR 
 
 
AIM : 
  
To write a C program to check whether a string belongs to the grammar 
S -> 0 S 0 | A 
A -> 1 A | ε  
 
Language defined by the Grammar 
 
Set of all strings over 𝚺={0,1} satisfying 0n1m0n  
 
ALGORITHM : 
 
1. Get the input string from the user.  
2. Find the length of the string. 
3. Check whether all the symbols in the input are either 0 or 1.  If so, 
print “String is valid” and go to step 4.  Otherwise print “String not 
valid” and quit the program. 
4. Read the input string character by character 
5. Count the number of 0’s in the front and store it in the variable 
count1 
6. Skip all 1’s 
7. Count the number of 0’s in the end and store it in the variable count2 
8. If count1==count2, print “String Accepted”.  Otherwise print “String 
Not Accepted” 
 
 
 
 
 
 
 
 
PROGRAM : 
 
#include<stdio.h> 
#include<string.h> 
void main() 
{ 
 char s[100]; 
 int i,flag,flag1,a,b; 
 int l,count1,count2; 
 printf("enter a string to check:"); 
 scanf("%s",s); 
 l=strlen(s); 
 flag=1; 
 for(i=0;i<l;i++) 
 { 
  if(s[i]!='0' && s[i]!='1') 
  { 
      flag=0; 
  } 
 } 
 if(flag!=1) 
  printf("string is Not Valid\n"); 
 if(flag==1) 
 { 
  i=0;count1=0; 
  while(s[i]=='0') // Count the no of 0s in the front 
  { 
   count1++; 
   i++; 
  } 
  while(s[i]=='1') 
  { 
   i++; // Skip all 1s 
  } 
  flag1=1; 
  count2=0; 
  while(i<l) 
  { 
   if(s[i]=='0')// Count the no of 0s at the end 
   { 
    count2++; 
   } 
   else 
   { 
    flag1=0; 
   } 
   i++; 
  } 
   
if(flag1==1) 
  { 
   if(count1==count2) 
               { 
                printf("The string satisfies the condition 0n1m0n\n"); 
                printf ("String Accepted\n"); 
            } 
             else 
            { 
         printf("The string does not satisfy the condition 0n1m0n\n"); 
         printf("String Not Accepted\n"); 
            } 
  } 
  else 
          { 
            printf("The string does not satisfy the condition 0n1m0n\n"); 
            printf("String Not Accepted\n"); 
 } 
 } 
} 
 
OUTPUT : 
 
 
 
 
 
 
EXP  4 d 
 
CHECKING WHETHER A STRING BELONGS TO A GRAMMAR 
 
 
AIM : 
  
To write a C program to check whether a string belongs to the grammar 
S -> 0 S 1 | ε 
 
Language defined by the Grammar 
 
Set of all strings over 𝚺={0,1} satisfying 0n1n  
 
ALGORITHM : 
 
1. Get the input string from the user.  
2. Find the length of the string. 
3. Check whether all the symbols in the input are either 0 or 1.  If so, 
print “String is valid” and go to step 4.  Otherwise print “String not 
valid” and quit the program. 
4. Find the length of the string.  If the length is odd, then print “String 
not accepted” and quit the program.  If the length is even, then go to 
step 5. 
5. Divide the string into two halves. 
6. If the first half contains only 0s and the second half contains only 1s 
then print “String Accepted”.  Otherwise print “String Not Accepted” 
 
 
 
 
 
 
 
 
 
 
PROGRAM : 
 
#include<stdio.h> 
#include<string.h> 
void main() 
{ 
 char s[100]; 
 int i,flag,flag1,flag2; 
 int l; 
 printf("enter a string to check:"); 
 scanf("%s",s); 
 l=strlen(s); 
 flag=1; 
 for(i=0;i<l;i++) 
 { 
  if(s[i]!='0' && s[i]!='1') 
  { 
      flag=0; 
  } 
 } 
 if(flag!=1) 
  printf("string is Not Valid\n"); 
 if(flag==1) 
 { 
  if(l%2!=0) // If string length is odd 
          { 
            printf("The string does not satisfy the condition 0n1n\n"); 
            printf("String Not Accepted\n"); 
             } 
  else 
  { 
   // To check first half contains 0s 
   flag1=1; 
   for(i=0;i<(l/2);i++) 
   { 
    if(s[i]!='0') 
    { 
     flag1=0; 
    } 
   } 
   // To check second half contains 1s 
   flag2=1; 
   for(i=l/2;i<l;i++) 
   { 
    if(s[i]!='1') 
    { 
     flag2=0; 
    } 
   } 
   if(flag1==1 && flag2==1) 
               { 
                printf("The string satisfies the condition 0n1n\n"); 
                printf("String Accepted\n"); 
             } 
   else 
               { 
                printf("The string does not satisfy the condition 0n1n\n"); 
                printf("String Not Accepted\n"); 
            } 
  } 
 } 
} 
 
OUTPUT : 
 
 
 
 
 
 
 
 
 
 
 
EXP  4 e 
 
CHECKING WHETHER A STRING BELONGS TO A GRAMMAR 
 
 
AIM : 
  
To write a C program to check whether a string belongs to the grammar 
S -> A 1 0 1 A 
A -> 0 A | 1 A | ε 
 
Language defined by the Grammar 
 
Set of all strings over 𝚺={0,1} having 101 as a substring 
 
ALGORITHM : 
 
1. Get the input string from the user.  
2. Find the length of the string. 
3. Check whether all the symbols in the input are either 0 or 1.  If so, 
print “String is valid” and go to step 4.  Otherwise print “String not 
valid” and quit the program. 
4. Read the input string character by character 
5. If the ith input symbol is 1, check whether (i+1)th symbol is 0 and 
(i+2)th symbol is 1. If so, the string has the substring 101.  So print 
“String Accepted”.  Otherwise, print “String Not Accepted” 
 
 
 
 
 
 
 
 
 
 
 
 
 
PROGRAM : 
 
#include<stdio.h> 
#include<string.h> 
int main() 
{ 
 char s[100]; 
 int i,flag,flag1; 
 int l; 
 printf("enter a string to check:"); 
 scanf("%s",s); 
 l=strlen(s); 
 flag=1; 
 for(i=0;i<l;i++) 
 { 
  if(s[i]!='0' && s[i]!='1') 
  { 
      flag=0; 
  } 
 } 
 if(flag==1) 
  printf("string is Valid\n"); 
 else 
  printf("string is Not Valid\n"); 
 if(flag==1) 
 { 
  flag1=0; 
  for(i=0;i<l-2;i++) 
  { 
   if(s[i]=='1') 
   { 
    if(s[i+1]=='0' && s[i+2]=='1') 
    {  
     flag1=1; 
     printf("Substring 101 exists.  String accepted\n"); 
     break; 
    }  
   } 
  } 
  if(flag1==0) 
   printf("Substring 101 does not exist.  String not accepted\n"); 
 } 
} 
 
 
 
 
 
 
 
OUTPUT : 
 
 
 
 
 
 
 
 
